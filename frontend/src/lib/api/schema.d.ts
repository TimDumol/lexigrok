/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Health check endpoint.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/suggested": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Suggested Topics
         * @description Retrieve a list of suggested topics for practice.
         */
        get: operations["get_suggested_topics_topics_suggested_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Topic Suggestions
         * @description Get topic suggestions based on a query.
         */
        get: operations["get_topic_suggestions_topics_suggestions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Custom Topic
         * @description Allows a user to define a custom topic (basic version).
         *     In reality, this might just influence the conversation start.
         */
        post: operations["create_custom_topic_topics_custom_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post User Message
         * @description Process a user's message (text or transcribed voice) and get a bot response.
         *     This is where the core language model interaction would happen.
         */
        post: operations["post_user_message_conversation_message_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Conversation Suggestion
         * @description Get a contextual suggestion for what the user could say next.
         */
        post: operations["get_conversation_suggestion_conversation_suggest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translate/word": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Contextual Translation
         * @description Get a contextual translation for a specific word.
         */
        post: operations["get_contextual_translation_translate_word_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Presigned Url For Image
         * @description Get a presigned URL to upload an image file to the storage backend.
         */
        get: operations["get_presigned_url_for_image_upload_image_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BotResponse */
        BotResponse: {
            /** Session Id */
            session_id: string;
            /** Response Text */
            response_text: string;
            /** Suggestion */
            suggestion?: string | null;
        };
        /** ConversationSuggestionRequest */
        ConversationSuggestionRequest: {
            /** Session Id */
            session_id: string;
            /** Current Topic Id */
            current_topic_id?: string | null;
            /** Conversation History */
            conversation_history?: string[] | null;
        };
        /** ConversationSuggestionResponse */
        ConversationSuggestionResponse: {
            /** Suggestion */
            suggestion: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthCheck */
        HealthCheck: {
            /** Status */
            status: string;
        };
        /** PresignedUrlResponse */
        PresignedUrlResponse: {
            /**
             * Url
             * @example https://storage.example.com/presigned-url
             */
            url: string;
            /**
             * Object Name
             * @example images/my-image.jpg
             */
            object_name: string;
        };
        /** SuggestedTopicsResponse */
        SuggestedTopicsResponse: {
            /** Topics */
            topics: components["schemas"]["Topic"][];
        };
        /** Topic */
        Topic: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /** TopicSuggestionResponse */
        TopicSuggestionResponse: {
            /** Suggestions */
            suggestions: components["schemas"]["Topic"][];
        };
        /** TranslationRequest */
        TranslationRequest: {
            /** Word */
            word: string;
            /** Context */
            context?: string | null;
            /**
             * Source Lang
             * @default es
             */
            source_lang: string;
            /**
             * Target Lang
             * @default en
             */
            target_lang: string;
        };
        /** TranslationResponse */
        TranslationResponse: {
            /** Word */
            word: string;
            /** Translation */
            translation: string;
            /** Explanation */
            explanation?: string | null;
            /** Example Sentence Source */
            example_sentence_source?: string | null;
            /** Example Sentence Target */
            example_sentence_target?: string | null;
            /** Audio Pronunciation Url */
            audio_pronunciation_url?: string | null;
        };
        /** UserMessage */
        UserMessage: {
            /** Session Id */
            session_id?: string | null;
            /** Text */
            text: string;
            /** Topic Id */
            topic_id?: string | null;
            /** Imageurl */
            imageUrl?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
        };
    };
    get_suggested_topics_topics_suggested_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuggestedTopicsResponse"];
                };
            };
        };
    };
    get_topic_suggestions_topics_suggestions_get: {
        parameters: {
            query: {
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicSuggestionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_custom_topic_topics_custom_post: {
        parameters: {
            query: {
                topic_name: string;
                description?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Topic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_user_message_conversation_message_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMessage"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_conversation_suggestion_conversation_suggest_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConversationSuggestionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationSuggestionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_contextual_translation_translate_word_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranslationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranslationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_presigned_url_for_image_upload_image_get: {
        parameters: {
            query: {
                file_name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PresignedUrlResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
